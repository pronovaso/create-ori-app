#!/usr/bin/env node

const fs = require('fs-extra');
const path = require('path');
const { exec } = require('child_process');

const packageJson = require('../package.json');

const gitFile = '.gitignore';

const gitIgnore = `# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage

# nyc test coverage
.nyc_output

# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# TypeScript v1 declaration files
typings/

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env

# next.js build output
.next

# settings directory WebStorm or IntelliJ IDEA
.idea/

# compile outdir
lib/

# test outdir
coverage/
`;

const version = `"version": "0.1.0-alpha.1"`;
const author = `"author": "Oriflame software"`;
const repo = `"repository": {
      "type": "git",
      "url": ""
    }`;

const scripts = `"build": "next build && tsc --project tsconfig.json",
    "dev": "next -p 8080",
    "start": "next start",
    "lint": "tsc --noEmit && eslint '*/**/*.{js,ts,tsx}' --quiet",
    "test": "jest --coverage",
    "test:watch": "jest --coverage --watchAll"`;

/**
 * we pass the object key dependency || devdependency to this function
 * @param {object} deps object key that we want to extract
 * @returns {string} a string of 'dependencies@version'
 * that we can attach to an `npm i {value}` to install
 * every dep the exact version speficied in package.json
 */
const getDeps = deps =>
    Object.entries(deps)
        .map(dep => `${dep[0]}@${dep[1]}`)
        .toString()
        .replace(/,/g, ' ')
        .replace(/\^/g, '')
        // exclude the plugin only used in this file, nor relevant to the boilerplate
        .replace(/fs-extra[^\s]+/g, '');

console.log('Initializing project..');

// create folder and initialize npm
exec(`mkdir ${process.argv[2]} && cd ${process.argv[2]} && npm init -f`, (initErr, initStdout, initStderr) => {
    if (initErr) {
        console.error(`Everything was fine, then it wasn't:
    ${initErr}`);
        return;
    }

    const packageJSON = `${process.argv[2]}/package.json`;
    // replace the default scripts, with the webpack scripts in package.json
    fs.readFile(packageJSON, (err, file) => {
        if (err) throw err;
        const data = file
            .toString()
            .replace('"test": "echo \\"Error: no test specified\\" && exit 1"', scripts)
            .replace('"version": "1.0.0"', version)
            .replace('"author": ""', author)
            .replace('"main": "index.js"', repo);
        fs.writeFile(packageJSON, data, err2 => err2 || true);
    });

    const filesToCopy = [
        'README.md',
        '.editorconfig',
        '.eslintignore',
        '.eslintrc.js',
        '.prettierrc.js',
        'babel.config.js',
        'jest.config.js',
        'next.config.js',
        'tsconfig.json',
    ];

    filesToCopy.forEach(file =>
        fs
            .createReadStream(path.join(__dirname, `../${file}`))
            .pipe(fs.createWriteStream(`${process.argv[2]}/${file}`)),
    );

    fs.writeFile(`${process.argv[2]}/.gitignore`, gitIgnore);
    fs.emptyDir(`${process.argv[2]}/public`);
    fs.emptyDir(`${process.argv[2]}/client`);

    console.log('npm init -- done\n');

    // installing dependencies
    console.log('Installing deps -- it might take a few minutes..');
    // const devDeps = getDeps(packageJson.devDependencies);
    const deps = getDeps(packageJson.dependencies);
    exec(`cd ${process.argv[2]} && npm i -S ${deps}`, (npmErr, npmStdout, npmStderr) => {
        if (npmErr) {
            console.error(`it's always npm, ain't it?
      ${npmErr}`);
            return;
        }
        console.log(npmStdout);
        console.log('Dependencies installed');

        console.log('Copying additional files..');
        // copy additional source files
        fs.copy(path.join(__dirname, '../src'), `${process.argv[2]}/src`)
            .then(() =>
                console.log(
                    `All done!\nYour project is now started into ${process.argv[2]} folder, refer to the README for the project structure.\nHappy Coding!`,
                ),
            )
            .catch(err => console.error(err));
    });
});
